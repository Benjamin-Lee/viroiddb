hits_df$extract_from=apply(hits_df, 1, trimifo, Expand_projectionX)
hits_df$extract_to=apply(hits_df, 1, trimito, Expand_projectionX)
out_faa=BStringSet(hits_df$seq,start=hits_df$extract_from, end=hits_df$extract_to)
} else {
out_faa=BStringSet(hits_df$seq,start=hits_df$q1, end=hits_df$q2)
}
names(out_faa)=hits_df$QnS
if(add_genetic_code==T){
hits_df$Genetic_Code="Standard"
hits_df$Genetic_Code[unique(grep("X",x = out_faa[]))]="Non-Standard"
}
output=list()
if(Out_faa==T){
output=append(output,out_faa)
}
if(out_df==T){
hits_df=data.frame(hits_df,stringsAsFactors = F)
output=list(output,hits_df[,setdiff(colnames(hits_df),c("seq"))])
}
return(output)
}
###### Parsers and Runners ######
MMseq2_outfmt6_cols=c("subject_name","evalue","gapopen","pident","nident","q1","q2","qL","p1","p2","pL","ali_len","raw","score","frame","mismatch","qcov","tcov")
hmmsearh_cols<-c("r1","qL",	"subject_name",	"r2",	"pL","evalue",	"score",	"bias",	"#",	"of",	"c-Evalue",	"i-Evalue",	"score2",	"bias",	"p1",	"p2",	"q1",	"q2",	"env_from",	"env_to",	"acc","r3","r4")
psiblast_cols=c("pident","q1","q2","p1","p2","qL","pL","ali_len","evalue","score","subject_name")
hhsearch_cols=c("subject_name", "pCoverage","ali_len","pL", "mismatch", "gapOpen",  "q1", "q2", "p1", "p2","Probab" ,"evalue", "score")
DaimondP_cols=c("subject_name", "evalue", "gapopen", "pident", "ali_len", "p1", "p2", "q1", "q2", "pL", "qL", "mismatch", "score")
Blastn_cols=c("query_name", "subject_name", "pident", "qL", "pL", "q1", "q2", "p1", "p2", "ali_len", "evalue", "score")
unicols=c("profile, qL, pL, p1, p2, q1, q2, score, evalue, ali_len, pCoverage")
colnyms=data.frame("psiblast"=toString(psiblast_cols),"mmseqs"=toString(MMseq2_outfmt6_cols),"hhsearch"=toString(hhsearch_cols),"hmmsearch"=toString(hmmsearh_cols),"diamondp"=toString(DaimondP_cols),"uni"=unicols,stringsAsFactors = F)
GenericHitsParser<- function(inpt="hit.tsv",versiza=versiza,Query2Profile=T,breakhdrs=T,input_was="Scaf_ID_frame",Cull_hits=F, search_tool="psiblast", reducecols=T,calc_pcoverage=T,colsnms="provide",CullCol="score",hedsep=".",hedclbs=c("id","frame")){
#Oldname: Generic_Hits_prsr_6frx
if (!(search_tool %in% c("psiblast","mmseqs","hmmsearch","hhsearch","diamondp"))){
print("If search tool isn't psiblast, mmseqs, diamondp, hhmsearch or hmmsearch, provide the raw input table colnames in the arg colsnms")
# return()
}else{
colsnms=c(input_was,stringr::str_split(colnyms[1,which(colnames(colnyms) ==search_tool)],", ",simplify = T))
}
hits_tbl=try(fread(inpt,stringsAsFactors = F,col.names = colsnms,sep = '\t' ))
if ((search_tool =="mmseqs")){
hits_tbl<-subset(hits_tbl, select = -c(6,4,16))
}
if ((search_tool =="hmmsearch")){
hits_tbl<-subset(hits_tbl, select = -c(2,5,23,24))
hits_tbl$ali_len=hits_tbl$q2-hits_tbl$q1
}
if (Cull_hits==T){
dt <- data.table(hits_tbl)
min_dt=data.frame(dt[ , max(score), by = input_was])
colnames(min_dt)=c(input_was,CullCol)
hits_tbl=merge(min_dt,hits_tbl,by=c(input_was,CullCol),all.x=T,all.y=F,stringsAsFactors = F) # Hard culling
}
hits_tbl$profile=hits_tbl$subject_name
if (breakhdrs==T){
hits_tbl=HeaderBreakerCb(input_df = hits_tbl,sep = hedsep,clb = input_was,nclb=hedclbs)
if (reducecols==T){
hits_tbl=subset(hits_tbl, select = c(input_was,hedclbs,intersect(str_split(colnyms[1,"uni"],", ")[[1]],colnames(hits_tbl))),stringsAsFactors = F)
}
} else{
if (reducecols==T){
hits_tbl=subset(hits_tbl, select = c(input_was,intersect(str_split(colnyms[1,"uni"],", ")[[1]],colnames(hits_tbl))),stringsAsFactors = F)
}
if (calc_pcoverage==T){
hits_tbl=CalcPcoverage(hits_tbl)
}
gc()
return(hits_tbl)
}
ReadMcl <- function(mclfile,col1prefix="motif"){
#Oldname: readmcl
cx <- scan(mclfile, what="", sep="\n",)
xcx <- strsplit(cx, "[[:space:]]+") # Separate elements by one or more whitespaces...
cluster_df=data.frame("cls"=paste0(col1prefix,".",1:length(xcx)),"reps"="",stringsAsFactors = F)
for ( i in 1:nrow(cluster_df)){
cluster_df$reps[i]=(xcx[i])
}
return(cluster_df)
}
ReadABC <- function(ABCfile,clsnms=c("reprs","mems")){
cx <- fread(input = ABCfile,data.table = F,skip = 0,header = F,sep = '\n')
cx=distinct(cx)
cx <- as.data.table(stringi::stri_split_fixed(as.character(cx[,"reprs"]),pattern =" ", n = 2,simplify = T))
cx[,lmems:=list(stringi::stri_split_fixed(as.character(.SD[]),pattern =" ")),by="V1",.SDcols="V2"]
colnames(cx)=c(clsnms,"lmems")
return(cx)
}
ReadABC2 <- function(ABCfile,clsnms=c("reprs","mems")){
cx <- fread(input = ABCfile,data.table = F,skip = 0,header = F,sep = '\t')
cx=distinct(cx)
xcx <- strsplit(cx$V2, "[[:space:]]+") # Separate elements by one or more whitespaces...
cx <- as.data.table(cx)[,lmems:=xcx]
colnames(cx)=c(clsnms,"lmems")
return(cx)
}
MMseqsClstsReader <- function(inpt="resultsDB_clu.tsv",clsnm="rdrp_id"){
#Oldname: mmseqclstsvReader
clsts=fread(input = inpt,col.names = c("reprs",clsnm),data.table = F,skip = 0,header = F)
singlts=clsts[which(clsts$reprs==clsts[,clsnm]),]
clsts=clsts[-which(clsts$reprs==clsts[,clsnm]),]
singlts=singlts[-which(singlts$reprs %in% unique(clsts$reprs)),]
memtbl=as.data.table(clsts)[, p0((.SD)), by = .(reprs)]
memtbl$V1=gsub(x = memtbl$V1,pattern = 'c("',fixed = T,replacement = "")
memtbl$V1=gsub(x = memtbl$V1,pattern = '")',fixed = T,replacement = "")
memtbl$V1=gsub(x = memtbl$V1,pattern = '"',fixed = T,replacement = "")
memtbl$V1=gsub(x = memtbl$V1,pattern = ')',fixed = T,replacement = "")
memtbl$V1=gsub("\n","",memtbl$V1,fixed = T)
memtbl$V1=p0(memtbl$reprs,", ",memtbl$V1)
memtbl=Rename1Col(memtbl,"V1",clsnm)
singlts=Rename1Col(singlts,"rdrp_id",clsnm)
memtbl=as.data.frame(rbind(memtbl,singlts))
tstdf<-data.frame(do.call('rbind', strsplit(as.character(memtbl[,clsnm]), ', ', fixed=T)))
memtbl$memlist=apply(tstdf,1,unique)
memtbl[,clsnm]=NULL
memtbl$Nseq=as.integer(lapply((memtbl$memlist),length))
memtbl=Rename1Col(memtbl,"memlist",clsnm)
return(distinct(memtbl))
}
ScreenLastz <- function(reference,querry){ # Forked from Jerome Ambroise script: https://github.com/JeromeAmbroise/Pathogenomics2/blob/master/R/screenfunction.R
rando=floor(runif(1,min=1,max = 10000000))
try(unlink(p0('temp.',rando), recursive = TRUE))
dir.create(p0('temp.',rando),showWarnings = F)
myarg <- paste0(reference,'[multiple] ',querry,' --ambiguous=iupac --notransition --strand=both --step=100 --nogapped ‑‑format=rdotplot > ',p0('temp.',rando),'/result.maf')
system2(command= 'lastz',args=myarg)
last <- try(read.table(p0('temp.',rando,"/","result.maf")),silent=T)
if (class(last) == "data.frame")
{
start.stop <- as.numeric(na.omit(suppressWarnings(as.numeric(as.character(last$V1)))))
start <- start.stop[seq(1,length(start.stop),by=2)]
stop <- start.stop[seq(2,length(start.stop),by=2)]
GR <-  GenomicRanges::GRanges(seqnames = 'seq',ranges = IRanges(start = start,end = stop))
GR.disjoin <- disjoin(GR)
hitlength <- sum(width(GR.disjoin))
seqlength <- sum(width(readDNAStringSet(reference)))
percentage <- 100*round(hitlength/seqlength,3)
}
else (percentage <- 0)
try(unlink(p0('temp.',rando), recursive = TRUE))
return(percentage)
}
Kalign3 <- function (xs, param = NULL) {
wd <- tempdir()
dir <- getwd()
temp_file <- basename(tempfile(tmpdir = wd))
on.exit({
file.remove(Sys.glob(paste(temp_file, ".*", sep = "")))
setwd(dir)
})
setwd(wd)
infile <- p0(temp_file, ".in")
outfile <- p0(temp_file, ".aln")
writeXStringSet(xs, infile, append = FALSE, format = "fasta")
system(p0("kalign3 -in ", infile, " -out ", outfile, " -f fasta"))
if (is(xs, "DNAStringSet"))
r <- readDNAMultipleAlignment(outfile, format = "fasta")
if (is(xs, "RNAStringSet"))
r <- readRNAMultipleAlignment(outfile, format = "fasta")
if (is(xs, "AAStringSet"))
r <- readAAMultipleAlignment(outfile, format = "fasta")
return(r)
}
GenericRunner <- function (command="echo", param = list("threads"=4,"mem"=120), RunInTmp=F, FlgType="-", AsType=" ", ... ) {
if(RunInTmp){
origdir <- getwd()
wd <- tempdir()
}
if (!RunInTmp){
origdir <- getwd()
wd <- origdir
}
setwd(wd)
temp_file <- basename(tempfile(tmpdir = wd))
on.exit({
file.remove(Sys.glob(paste(temp_file, ".*", sep = "")))
setwd(origdir)
})
Comsdf=data.frame("argname"=names((param)), "argval"=unname(unlist(param)))
Comsdf$astr=paste0(FlgType, Comsdf$argname)
Comsdf$astr=paste0(Comsdf$astr,AsType,Comsdf$argval)
Comscaf=paste(sep = " ",command,  paste(Comsdf$astr,collapse = " "))
system(Comscaf,...)
}
GenericRunnerInOut <- function (xs, infile="infile.faa",inflag="i",outflag="o", outfile="outfile.afa", keepinout=F,command="echo", param = list("threads"=4,"mem"=120), RunInTmp=F, FlgType="-", AsType=" ", ... ) {
#For biosequences.
writeXStringSet(xs, infile, append = FALSE, format = "fasta")
iol=list(infile,outfile)
names(iol)=c(inflag,outflag)
param=append(param,iol)
GenericRunner(param = param,...)
if (is(xs, "DNAStringSet"))
r <- readDNAMultipleAlignment(outfile, format = "fasta")
if (is(xs, "RNAStringSet"))
r <- readRNAMultipleAlignment(outfile, format = "fasta")
if (is(xs, "AAStringSet"))
r <- readAAMultipleAlignment(outfile, format = "fasta")
return(r)
}
###### ML/lm related  ######
GenerateSeqDescriptors <- function(indf=allmots,PrecentRand=10,aacol="AA_seq",HEC_Prob=F,AA_Prob=F,K.HEC=3, K.aa=2,casecol="case",Exmp_src_faa=rdrps_faa,SEED=123,valuecol="motif_type",RemovesSparseCols=T){
# Oldname: GenerateMotifDescriptors
# Need some refactoring but should work.
set.seed(SEED)
# indf=
setDT(indf)
trainR=which(indf[,..casecol]=="Train")
testR=setdiff(c(1:nrow(indf)),trainR)
if (PrecentRand!=0){
Nfakes=(PrecentRand/100)*length(trainR)
fake_seqs=universalmotif::shuffle_sequences(sequences = Exmp_src_faa[(sample(x = length(Exmp_src_faa),size = Nfakes))])
fakemotifs=narrow(fake_seqs,start=1,end=(sample(x =indf$mL[trainR],size = Nfakes)))
names(fakemotifs)=c(p0("fake.",(1:Nfakes)))
fakemotifs=XString2DF(fakemotifs,input_was = "new_name")
fakemotifs[,valuecol]="666"
fakemotifs$name_seq=p0(fakemotifs$new_name,".",unlist(fakemotifs[,valuecol]))
fakemotifs=Rename1Col(fakemotifs,"seq",aacol)
fakemotifs=rename1col(fakemotifs,"Length","mL")
fakemotifs$case="Train"
indf=rbind(indf,fakemotifs)
trainR=union(trainR,grep("fake",indf$new_name,fixed = T))
}
indf$pssp=DECIPHER::PredictHEC(AAStringSet(unlist(indf[,..aacol])))
pssp=BStringSet(indf$pssp)
names(pssp)=indf$name_seq
psspdfdt=XString2KmerDT(infaa = pssp,abcde =c("H","E","C"),k = K.HEC,out_probablity = HEC_Prob,input_was = "name_seq")
colnames(psspdfdt)=tolower(colnames(psspdfdt))
AAset=BStringSet(AAStringSet(unlist(indf[,..aacol])))
names(AAset)=indf$name_seq
AAdfdt=XString2KmerDT(infaa=AAset ,abcde = setdiff(AA_ALPHABET,c(".","+","-","*")),k = K.aa,out_probablity = AA_Prob,input_was = "name_seq")
indf=distinct(merge(merge(indf,AAdfdt,by="name_seq",all.x=T,all.y=F),psspdfdt,by="name_seq",all.x=T,all.y=F))
names(indf)=trimws(names(indf)) # Legacy
if (RemovesSparseCols==T){
indf = setDT(RemovesSparseCols(as.data.frame(indf)))
}
vals=unique(unlist(indf[,..valuecol]))
indf[,as.character(c(vals))]=0
for (val in vals){
set(indf, i = which((indf[,..valuecol]==val)), j = val, value = 1)
}
gc()
return(indf)
}
library(data.table)
library(Biostrings)
library(phangorn)
library(castor)
library(ggtree)
current_path=("/media/HDD1/uri/RNA_Vir_MTs/viroiddb/viroiddb/")
# Information  --------------------------------------------------------------------
## Script name: ViroVis.R
## Purpose of script: Visualizing the subvirales sequence space, hopefully not just eyecandy.
## Author: Uri Neri
## Date Created: 20-04-2021
## Copyright (c) Uri Neri & Benjamin Lee, 2021
## Email: uri.neri@gmail.com
# Body  --------------------------------------------------------------------
source("/media/HDD1/uri/RNA_Vir_MTs/RVMT/Misc/basicf.r")
# Body  --------------------------------------------------------------------
source("/media/HDD1/uri/RNA_Vir_MTs/RVMT/Misc/basicf.r")
library(data.table)
library(Biostrings)
library(phangorn)
library(castor)
library(ggtree)
current_path=("/media/HDD1/uri/RNA_Vir_MTs/viroiddb/viroiddb/")
setwd(current_path)
#### Read stuff ####
fastas=list.files(pattern = ".*fasta")
fastas
#### Read stuff ####
fastas=list.files(path = "./db/",pattern = ".*fasta")
fastas
TabFastaList=data.frame("File"=fastas,"Group"=gsub(pattern = ".fasta",replacement = "",x = fastas))
TabFastaList
TabFastaList$XString=lapply(TabFastaList$File,FUN = function(x) (readDNAStringSet(x)))
TabFastaList$XString=lapply(TabFastaList$File,FUN = function(x) (readDNAStringSet(p0("./db/",x))))
TabFastaList$XString
AllSeqs=DNAStringSet()
for (i in 1:nrow(TabFastaList)){
AllSeqs=c(AllSeqs,unlist(TabFastaList$XString[i])[[1]])
}
AllSeqs
AllSeqs=AllSeqs[unique(names(AllSeqs))] #9,891
AllSeqs
TabFastaList
##### Poor-mans MARS  ####
# RDSs_To_Load=c("FieldsDF.RDS","IDFT.RDS","Motifs.RDS", "MiscData.RDS", "IDFT.fasta.RDS" ,"RdRpInfo.RDS","Set2Br2Prof2Clad2Info.RDS","IDFT_RdRp.RDS","MetaData.RDS","MTstats.RDS","RdRpDF.RDS")
# for (i in RDSs_To_Load) {
#   x <- gsub(x = i,pattern = ".RDS",fixed = T,replacement = "")
#   eval(call("<-", as.name(x), readRDS(p0(RDSDir,"/",i))))
# }
pospis=TabFastaList$XString[Group==pospiviroidae]
##### Poor-mans MARS  ####
# RDSs_To_Load=c("FieldsDF.RDS","IDFT.RDS","Motifs.RDS", "MiscData.RDS", "IDFT.fasta.RDS" ,"RdRpInfo.RDS","Set2Br2Prof2Clad2Info.RDS","IDFT_RdRp.RDS","MetaData.RDS","MTstats.RDS","RdRpDF.RDS")
# for (i in RDSs_To_Load) {
#   x <- gsub(x = i,pattern = ".RDS",fixed = T,replacement = "")
#   eval(call("<-", as.name(x), readRDS(p0(RDSDir,"/",i))))
# }
pospis=filter(TabFastaList,Group==pospiviroidae)$XString
##### Poor-mans MARS  ####
# RDSs_To_Load=c("FieldsDF.RDS","IDFT.RDS","Motifs.RDS", "MiscData.RDS", "IDFT.fasta.RDS" ,"RdRpInfo.RDS","Set2Br2Prof2Clad2Info.RDS","IDFT_RdRp.RDS","MetaData.RDS","MTstats.RDS","RdRpDF.RDS")
# for (i in RDSs_To_Load) {
#   x <- gsub(x = i,pattern = ".RDS",fixed = T,replacement = "")
#   eval(call("<-", as.name(x), readRDS(p0(RDSDir,"/",i))))
# }
pospis=filter(TabFastaList,Group=="pospiviroidae")$XString
pospis
##### Poor-mans MARS  ####
# RDSs_To_Load=c("FieldsDF.RDS","IDFT.RDS","Motifs.RDS", "MiscData.RDS", "IDFT.fasta.RDS" ,"RdRpInfo.RDS","Set2Br2Prof2Clad2Info.RDS","IDFT_RdRp.RDS","MetaData.RDS","MTstats.RDS","RdRpDF.RDS")
# for (i in RDSs_To_Load) {
#   x <- gsub(x = i,pattern = ".RDS",fixed = T,replacement = "")
#   eval(call("<-", as.name(x), readRDS(p0(RDSDir,"/",i))))
# }
pospis=filter(TabFastaList,Group=="pospiviroidae")$XString[[1]]
pospis
##### All vs All ####
AllvsAll=fread("./tmpblastall/viroidDB.tsv",sep = '\t',header = F,col.names = Blastn_cols)
SubVirDT=XString2DF(AllSeqs,input_was = "seqID",trimwhite = F,addlength = T,seqcolname = "Nuc_Seq")
SubVirDT[,c(TabFastaList$Group)]=F
for (i in 1:nrow(TabFastaList)){
w1=which(SubVirDT$seqID %in% names(unlist(TabFastaList$XString[i])[[1]]))
SubVirDT[w1,TabFastaList$Group[i]]=T
}
SubVirDT=HeaderBreakerCb(SubVirDT,sep = " ",clb ="seqID",nclb = "")
SubVirDT=SubVirDT[,c(1:12)]
SubVirDT=Rename1Col(SubVirDT,"","SeqID_trim")
SubVirDT$seqID
str()ubVirDT
str(SubVirDT)
##### All vs All ####
AllvsAll=fread("./Neri/tmpblastall/viroidDB.tsv",sep = '\t',header = F,col.names = Blastn_cols)
AllvsAll=AllvsAll[(pident>0.95 & evalue<0.000000001 & ali_len>100)]
AllvsAll
AllvsAll=`droprows<-`(AllvsAll,which(AllvsAll$query_name==AllvsAll$subject_name))
AllvsAll
AllvsAll$query_name==AllvsAll$subject_name)
AllvsAll$query_name==AllvsAll$subject_name
which(AllvsAll$query_name==AllvsAll$subject_name)
AllvsAll=CalcPcoverage(AllvsAll)
AllvsAll=AllvsAll[(pCoverage>0.5)]
AllvsAll
summary(AllvsAll$pCoverage)
AllvsAll=AllvsAll[(pident>0.95 && evalue<0.000000001 && ali_len>100)]
AllvsAll
AllvsAll=AllvsAll[c((pident>0.95) && (evalue<0.000000001) && (ali_len>100))]
AllvsAll=filter(AllvsAll,c((pident>0.95) && (evalue<0.000000001) && (ali_len>100)))
AllvsAll=filter(AllvsAll,(pident>0.95) && (evalue<0.000000001) && (ali_len>100))
AllvsAll=filter(AllvsAll,(pident>0.95) & (evalue<0.000000001) & (ali_len>100))
AllvsAll=filter(AllvsAll,(pident>0.95) , (evalue<0.000000001) & (ali_len>100))
AllvsAll=filter(AllvsAll,(pident>0.95) , (evalue<0.000000001) , (ali_len>100))
AllvsAll
AllvsAll=filter(AllvsAll,pident>0.95 , (evalue<0.000000001) , (ali_len>100))
AllvsAll=filter(AllvsAll,pident>0.95 )
AllvsAll
which(AllvsAll$pident<95)
AllvsAll[pident<95]
AllvsAll=AllvsAll[pident>95]
AllvsAll=AllvsAll[pident>95,evalue<0.000000001]
##### All vs All ####
AllvsAll=fread("./Neri/tmpblastall/viroidDB.tsv",sep = '\t',header = F,col.names = Blastn_cols)
AllvsAll=AllvsAll[(pident>95,evalue<0.000000001)]
AllvsAll=AllvsAll[(pident>95&evalue<0.000000001)]
AllvsAll=AllvsAll[(pident>95)]
AllvsAll=AllvsAll[(pident>95&evalue<0.000000001&(ali_len>100))]
AllvsAll
min(AllvsAll$score))
min(AllvsAll$score)
AllvsAll=AllvsAll[(pident>95&evalue<0.000000001&(ali_len>100)&score>160)]
AllvsAll=AllvsAll[(pident>99&evalue<0.000000001&(ali_len>100)&score>160)]
which(AllvsAll$pident<95)
which(AllvsAll$pident<99)
which(AllvsAll$pident<100)
AllvsAll=AllvsAll[(pident>95)]
AllvsAll=`droprows<-`(AllvsAll,which(AllvsAll$query_name==AllvsAll$subject_name))
AllvsAll=CalcPcoverage(AllvsAll)
AllvsAll=AllvsAll[(pCoverage>0.5)]
summary(AllvsAll$pCoverage)
AllvsAll=AllvsAll[(pCoverage>0.9)]
AllvsAll
mcl
install.packages("MCL")
MCL::mcl()
MCL::mcl(addLoops = T)
install.packages("mclust")
AllvsAll
WriteWolfTbl(Rtbl = AllvsAll[,c("query_name","subject_name","evalue")],filepath = "Neri/AllvsAll_trim.tsv")
##### All vs All ####
AllvsAll=fread("./Neri/tmpblastall/viroidDB.tsv",sep = '\t',header = F,col.names = Blastn_cols)
AllvsAll=AllvsAll[(pident>99&evalue<0.000000001&(ali_len>100)&score>160)]
AllvsAll=CalcPcoverage(AllvsAll)
AllvsAll=AllvsAll[(pCoverage>0.9)]
WriteWolfTbl(Rtbl = AllvsAll[,c("query_name","subject_name","evalue")],filepath = "Neri/AllvsAll_trim.tsv")
WriteWolfTbl(Rtbl = AllvsAll[,c("query_name","subject_name","evalue")],filepath = "Neri/tmpblastall/Blastn_all_vs_all/AllvsAll_trim.tsv")
unique(AllvsAll$query_name)
length(unique(AllvsAll$query_name))
ReadMcl
MCL_1.2=ReadMcl(mclfile = "Neri/tmpblastall/VDB_allByAll_blast_Infl_1.2.mcl",col1prefix = "seqID")
MCL_1.2$cls
MCL_1.2=ReadMcl(mclfile = "Neri/tmpblastall/VDB_allByAll_blast_Infl_1.2.mcl",col1prefix = "cls")
unlist
unlist(MCL_1.2$reps)
length(unlist(MCL_1.2$reps)
)
AllSeqs
AllSeqs@ranges@width
min(AllSeqs@ranges@width)
AllvsAll$query_name
SubVirDT$SeqID_trim
colnames(SubVirDT)
##### Testing  ####
AllvsAll=merge(Rename1Col(AllvsAll,"query_name","SeqID_trim"),SubVirDT[,c( "seqID","Length", "avsunviroidae", "deltavirus","pospiviroidae", "retrozymes","satellites","unclassified","viroids")],by="SeqID_trim",all.x=T,all.y=F)
##### All vs All ####
AllvsAll=fread("./Neri/tmpblastall/viroidDB.tsv",sep = '\t',header = F,col.names = Blastn_cols)
AllvsAll=AllvsAll[(pident>99&evalue<0.000000001&(ali_len>100)&score>160)]
# AllvsAll=`droprows<-`(AllvsAll,which(AllvsAll$query_name==AllvsAll$subject_name))
AllvsAll=CalcPcoverage(AllvsAll)
AllvsAll=AllvsAll[(pCoverage>0.9)]
##### Testing  ####
AllvsAll=merge(Rename1Col(AllvsAll,"query_name","SeqID_trim"),SubVirDT[,c( "SeqID_trim","Length", "avsunviroidae", "deltavirus","pospiviroidae", "retrozymes","satellites","unclassified","viroids")],by="SeqID_trim",all.x=T,all.y=F)
AllvsAll
AllvsAll=AllvsAll[(pident>99&evalue<0.000000001&(ali_len>100)&score>160)]
WriteWolfTbl(Rtbl = AllvsAll[,c("query_name","subject_name","evalue")],filepath = "Neri/tmpblastall/Blastn_all_vs_all/AllvsAll_trim.tsv")
WriteWolfTbl(Rtbl = AllvsAll,filepath = "Neri/tmpblastall/AllvsAll_trim.tsv")
AllvsAll$Type="ALL"
type
Vtype
for (Vtype in c( "avsunviroidae", "deltavirus","pospiviroidae", "retrozymes","satellites","unclassified")){
AllvsAll$Type[which(AllvsAll[,Vtype])]=Vtype
}
Vtype
which(AllvsAll[,Vtype])
which(AllvsAll[,as.char(Vtype)])
AllvsAll[,as.char(Vtype)]
AllvsAll[,..as.char(Vtype)]
AllvsAll[,..(Vtype)]
AllvsAll[,..Vtype]
which(AllvsAll[,..Vtype])
which(unlist(AllvsAll[,..Vtype]))
which((AllvsAll[,..Vtype][1]))
which((AllvsAll[,..Vtype][[1]]))
for (Vtype in c( "avsunviroidae", "deltavirus","pospiviroidae", "retrozymes","satellites","unclassified")){
AllvsAll$Type[which((AllvsAll[,..Vtype][[1]]))]=Vtype
}
WriteWolfTbl(Rtbl = AllvsAll[, c("SeqID_trim","subject_name","pident", "avsunviroidae", "deltavirus","pospiviroidae", "retrozymes","satellites","unclassified")],filepath = "Neri/tmpblastall/AllvsAll_trim.tsv")
WriteWolfTbl(Rtbl = AllvsAll[, c("SeqID_trim","subject_name","pident","Type") ],filepath = "Neri/tmpblastall/AllvsAll_trim.tsv")
WriteWolfTbl(Rtbl = AllvsAll[, c("SeqID_trim","subject_name","evalue","pident","Type") ],filepath = "Neri/tmpblastall/AllvsAll_trim.tsv")
View(AllvsAll)
AllvsAll$Type
unique(AllvsAll$Type)
VtypeDT=distinct(AllvsAll[,c("SeqID_trim","Type")])
View(VtypeDT)
WriteWolfTbl(Rtbl = VtypeDT,filepath = "Neri/tmpblastall/VtypeDT.tsv")
##### All vs All ####
AllvsAll=fread("./Neri/tmpblastall/viroidDB.tsv",sep = '\t',header = F,col.names = Blastn_cols)
AllvsAll=AllvsAll[(pident>75&evalue<0.000000001&(ali_len>100)&score>100)]
AllvsAll=AllvsAll[(pident>75&evalue<0.000000001&(ali_len>100)&score>150)]
AllvsAll=AllvsAll[(pident>75&evalue<0.000000001&(ali_len>100)&score>160)]
# AllvsAll=`droprows<-`(AllvsAll,which(AllvsAll$query_name==AllvsAll$subject_name))
AllvsAll=CalcPcoverage(AllvsAll)
AllvsAll=AllvsAll[(pCoverage>0.9)]
##### Testing  ####
AllvsAll=merge(Rename1Col(AllvsAll,"query_name","SeqID_trim"),SubVirDT[,c( "SeqID_trim","Length", "avsunviroidae", "deltavirus","pospiviroidae", "retrozymes","satellites","unclassified","viroids")],by="SeqID_trim",all.x=T,all.y=F)
AllvsAll$Type="ALL"
for (Vtype in c( "avsunviroidae", "deltavirus","pospiviroidae", "retrozymes","satellites","unclassified")){
AllvsAll$Type[which((AllvsAll[,..Vtype][[1]]))]=Vtype
}
WriteWolfTbl(Rtbl = AllvsAll[, c("SeqID_trim","subject_name","evalue","pident") ],filepath = "Neri/tmpblastall/AllvsAll_trim.tsv")
VtypeDT=distinct(AllvsAll[,c("SeqID_trim","Type")])
WriteWolfTbl(Rtbl = VtypeDT,filepath = "Neri/tmpblastall/VtypeDT.tsv")
WriteWolfTbl(Rtbl = AllvsAll[, c("SeqID_trim","subject_name","evalue") ],filepath = "Neri/tmpblastall/AllvsAll_trim.tsv")
##### Poor-mans MARS  ####
# RDSs_To_Load=c("FieldsDF.RDS","IDFT.RDS","Motifs.RDS", "MiscData.RDS", "IDFT.fasta.RDS" ,"RdRpInfo.RDS","Set2Br2Prof2Clad2Info.RDS","IDFT_RdRp.RDS","MetaData.RDS","MTstats.RDS","RdRpDF.RDS")
# for (i in RDSs_To_Load) {
#   x <- gsub(x = i,pattern = ".RDS",fixed = T,replacement = "")
#   eval(call("<-", as.name(x), readRDS(p0(RDSDir,"/",i))))
# }
pospis=filter(TabFastaList,Group=="pospiviroidae")$XString[[1]]
pospis
Seqs2DB(pospis,dbFile = "Neri/DecDB",processors = 10)
Seqs2DB(pospis,dbFile = "Neri/DecDB",processors = 10,type = "FASTA")
Seqs2DB(pospis,dbFile = "Neri/DecDB",processors = 10,type = "FASTA",identifier = "Pospi_")
Seqs2DB(seqs = pospis,dbFile = "Neri/DecDB",processors = 10,type = "FASTA",identifier = "Pospi_")
Seqs2DB(seqs = "db/pospiviroidae.fasta",dbFile = "Neri/DecDB",processors = 10,type = "FASTA",identifier = "Pospi_")
FindSynteny(dbFile =Seqs2DB,processors = 10 )
FindSynteny(dbFile ="Neri/DecDB",processors = 10 )
FindSynteny(dbFile ="Neri/DecDB",processors = 10,identifier = "" )
Seqs2DB(seqs = "db/pospiviroidae.fasta",dbFile = "Neri/DecDB",processors = 10,type = "FASTA")
##### Poor-mans MARS  ####
# RDSs_To_Load=c("FieldsDF.RDS","IDFT.RDS","Motifs.RDS", "MiscData.RDS", "IDFT.fasta.RDS" ,"RdRpInfo.RDS","Set2Br2Prof2Clad2Info.RDS","IDFT_RdRp.RDS","MetaData.RDS","MTstats.RDS","RdRpDF.RDS")
# for (i in RDSs_To_Load) {
#   x <- gsub(x = i,pattern = ".RDS",fixed = T,replacement = "")
#   eval(call("<-", as.name(x), readRDS(p0(RDSDir,"/",i))))
# }
pospis=readDNAStringSet(filepath = "db/pospiviroidae.fasta") #filter(TabFastaList,Group=="pospiviroidae")$XString[[1]]
Seqs2DB(seqs = "db/pospiviroidae.fasta",dbFile = "Neri/DecDB",processors = 10,type = "FASTA",identifier = names(pospis))
FindSynteny(dbFile ="Neri/DecDB",processors = 10,identifier = "" )
FindSynteny(dbFile ="Neri/DecDB",processors = 10)
FindSynteny(dbFile ="Neri/DecDB",processors = 10,useFrames = FALSE )
# Information  --------------------------------------------------------------------
## Script name: ViroVis.R
## Purpose of script: Visualizing the subvirales sequence space, hopefully not just eyecandy.
## Author: Uri Neri
## Date Created: 20-04-2021
## Copyright (c) Uri Neri & Benjamin Lee, 2021
## Email: uri.neri@gmail.com
# Body  --------------------------------------------------------------------
source("/media/HDD1/uri/RNA_Vir_MTs/RVMT/Misc/basicf.r")
library(data.table)
library(Biostrings)
library(phangorn)
library(castor)
library(ggtree)
current_path=("/media/HDD1/uri/RNA_Vir_MTs/viroiddb/viroiddb/")
setwd(current_path)
